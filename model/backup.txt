//DPI TOOL



import time
import numpy as np
import joblib
import onnxruntime as ort
import pandas as pd
from nfstream import NFStreamer, NFPlugin
import csv

# ==== Load Required Artifacts ====
scaler = joblib.load("scaler.pkl")
features = joblib.load("features.pkl")
with open("threshold.txt") as f:
    threshold = float(f.read().strip())

# ==== Load ONNX Autoencoder ====
session = ort.InferenceSession("autoencoder_model.onnx")
input_name = session.get_inputs()[0].name
output_name = session.get_outputs()[0].name

# ==== Output CSV Logger Setup ====
log_filename = "live_detection_log.csv"
with open(log_filename, "w", newline="") as f:
    writer = csv.writer(f)
    writer.writerow(["Timestamp", "MSE", "Prediction"] + features)

# ==== Start NFStreamer ====
print("[üîç] Starting live stream...")
streamer = NFStreamer(source="wlan0", statistical_analysis=True)

for flow in streamer:
    try:
        # ==== Feature Extraction ====
        feats = [
            getattr(flow, "bidirectional_duration_ms", 0),
            getattr(flow, "src2dst_packets", 0),
            getattr(flow, "dst2src_packets", 0),
            getattr(flow, "src2dst_bytes", 0),
            getattr(flow, "dst2src_bytes", 0),
            getattr(flow, "bidirectional_mean_piat_ms", 0),
            getattr(flow, "bidirectional_stddev_piat_ms", 0),
            getattr(flow, "bidirectional_max_piat_ms", 0),
            getattr(flow, "bidirectional_min_piat_ms", 0),
            getattr(flow, "src2dst_duration_ms", 0),
            getattr(flow, "src2dst_mean_piat_ms", 0),
            getattr(flow, "src2dst_stddev_piat_ms", 0),
            getattr(flow, "src2dst_max_piat_ms", 0),
            getattr(flow, "src2dst_min_piat_ms", 0),
            getattr(flow, "dst2src_duration_ms", 0),
            getattr(flow, "dst2src_mean_piat_ms", 0),
            getattr(flow, "dst2src_stddev_piat_ms", 0),
            getattr(flow, "dst2src_max_piat_ms", 0),
            getattr(flow, "dst2src_min_piat_ms", 0),
            getattr(flow, "src2dst_mean_ps", 0),
            getattr(flow, "dst2src_mean_ps", 0),
            getattr(flow, "dst_port", 0),
        ]

        # ==== Preprocess and Predict ====
        x_df = pd.DataFrame([feats], columns=features)
        x_scaled = scaler.transform(x_df).astype(np.float32)
        pred = session.run([output_name], {input_name: x_scaled})[0]
        mse = np.mean(np.power(x_scaled - pred, 2))
        label = "ATTACK üö®" if mse > threshold else "BENIGN ‚úÖ"

        # ==== Log to Console ====
        print(f"[{time.strftime('%H:%M:%S')}] MSE: {mse:.6f} ‚Üí {label}")

        # ==== Log to CSV ====
        with open(log_filename, "a", newline="") as f:
            writer = csv.writer(f)
            writer.writerow([time.strftime("%Y-%m-%d %H:%M:%S"), mse, label] + feats)

    except Exception as e:
        print("[‚ö†Ô∏è] Error in prediction loop:", e)
        continue
   
   
   

//0.0025975127
        
        

